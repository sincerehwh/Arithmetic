

# 线性表的分类 
#                                             ┌──────────────┐
#                                         ┌──▶│    Inside    │
#                       ┌──────────────┐  │   └──────────────┘
#                 ┌───▶ │  Order list  ├──┤                   
#                 │     └──────────────┘  │   ┌──────────────┐
#                 │                       └──▶│   Outside    │
# ┌────────────┐  │                           └──────────────┘
# │Linear List ├──┤                           ┌──────────────┐
# └────────────┘  │                       ┌──▶│    Single    │
#                 │                       │   └──────────────┘
#                 │     ┌──────────────┐  │   ┌──────────────┐
#                 └───▶ │ linked list  ├──┼──▶│   Outside    │
#                       └──────────────┘  │   └──────────────┘
#                                         │   ┌──────────────┐
#                                         └──▶│    Cycle     │
#                                             └──────────────┘

# 操作			链表	   顺序表
#
# 访问元素		O(n)	O(1)
# 在头部插入/删除	O(1)	O(n)
# 在尾部插入/删除	O(n)	O(1)
# 在中间插入/删除	O(n)	O(n)


# 顺序表的类型 ───────────▶  内置类型 ───────────▶ 列表内的数据即数据本身                                                                                                                                                                
#
# ┌───────────┐                                                                                    
# │0x10ac59fd0├────▶ 4475690960                                                                    
# ├───────────┤                                                                                    
# │0x10ac5b0b8├────▶ 4475695288                                                                    
# ├───────────┤                                                                                    
# │0x10acd6cf8├────▶ 4476202232                                                                    
# ├───────────┤                                                                                    
# │0x10acd6d30├────▶ 4476202288                                                                    
# ├───────────┤                                                                                    
# │0x10b1defd0├────▶ 4481478608                                                                    
# ├───────────┤                                                                                    
# │0x10b1def98├────▶ 4481478552                                                                    
# ├───────────┤                                                                                    
# │0x10b1def28├────▶ 4481478440                                                                    
# ├───────────┤                                                                                    
# │0x10b1ebe48├────▶ 4481531464                                                                    
# └───────────┘                                                                                                                                                                
#
#  顺序表的类型 ───────────▶ 外置类型  ───────────▶  列表内的数据是对应的地址        
#
# ┌───────────┐    ┌────────┐                                                                      
# │0x10ac59fd0├───▶│ Data1  │                                                                      
# ├───────────┤    └────────┘┌────────┐                                                            
# │0x10ac5b0b8├─────────────▶│ Data2  │                                                            
# ├───────────┤              └────────┘┌────────┐                                                  
# │0x10acd6cf8├───────────────────────▶│ Data3  │                                                  
# ├───────────┤                        └────────┘┌────────┐                                        
# │0x10acd6d30├─────────────────────────────────▶│ Data4  │                                        
# ├───────────┤                                  └────────┘┌────────┐                              
# │0x10b1defd0├───────────────────────────────────────────▶│ Data5  │                              
# ├───────────┤                                            └────────┘┌────────┐                    
# │0x10b1def98│─────────────────────────────────────────────────────▶│ Data6  │                    
# ├───────────┤                                                      └────────┘┌────────┐          
# │0x10b1def28├───────────────────────────────────────────────────────────────▶│ Data7  │          
# ├───────────┤                                                                └────────┘┌────────┐
# │0x10b1ebe48├─────────────────────────────────────────────────────────────────────────▶│ Data8  │
# └───────────┘                                                                          └────────┘

#  顺序表的结构：
# 
#  一体式结构：					分离式结构：
#
# ┌───────────┐                ┌───────────┐               
# │ capacity  ├────▶ max       │ capacity  ├────▶ max      
# ├───────────┤                ├───────────┤               
# │ count     ├────▶ num       │ count     ├────▶ num      
# ├───────────┤                ├───────────┤               
# │0x10acd6cf8│                │0x10acd6cf8├┐ object at    
# ├───────────┤                └───────────┘│              
# │0x10acd6d30│                             │ ┌───────────┐
# ├───────────┤                             └▶│0x10acd6d30│
# │0x10b1defd0│                               ├───────────┤
# ├───────────┤                               │0x10b1defd0│
# │0x10b1def98│                               ├───────────┤
# ├───────────┤                               │0x10b1def98│
# │0x10b1def28│                               ├───────────┤
# ├───────────┤                               │0x10b1def28│
# │0x10b1ebe48│                               ├───────────┤
# └───────────┘                               │0x10b1ebe48│
#                                             └───────────┘
# 顺序表的操作：
#
# 1.增加元素：
#     表尾插入 -> O(1)
#     保序插入 -> O(n)  把插入点后的元素全部后挪，插入
#     非保序插入 -> O(1) 把插入点的元素后挪，插入
#
# 2.删除元素：
#     表尾删除 -> O(1)
#     保序删除 -> O(n)  把删除点后的元素全部前挪
#     非保序删除 -> O(1) 把最后一个元素填补
#
# Python中的list的实现：
#
# 1.基于下标位置的索引：访问和更新O(1)
#
# 2.允许加入任意元素，分离式技术实现的的元素外置动态顺序表
# 
# 在创建空表时，分配一块能容纳8个元素的存储区；在执行插入操作时，如果存储区满就换一块4倍大的存储区。如果表的超过50000，采用增加一倍的策略。避免过多空间的浪费。
# 
# 



# linked list 
# 可以充分利用计算机内存空间，实现灵活的内存动态管理
# 链表的类型：
# 
# 单链表：
#			
#  ┌───┐                                                                           
#  │ p ├┐                                                                          
#  └───┘│                                                                          
#       │ ┌─────┬──────┐     ┌──────┬──────┐    ┌──────┬──────┐     ┌──────┬──────┐
#       └▶│ elem│ next ├────▶│ elem │ next │... │ elem │ next ├────▶│ elem │ blank│
#         └─────┴──────┘     └──────┴──────┘    └──────┴──────┘     └──────┴──────┘
# 单链表操作：
# 
# is_empty() 判断链表是否为空
# length() 返回链表的长度
# travel() 遍历
# add(item) 在头部添加一个节点
# append(item) 在尾部添加一个节点
# insert(pos, item) 在指定位置pos添加节点
# remove(item) 删除一个节点
# search(item) 查找节点是否存在





